// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(USER)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts      Account[]
  comparators   Comparator[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Comparator {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String       // Foreign key to User
  name        String
  description String
  logo        String
  color       String
  toolType    String

  owner       User         @relation(fields: [ownerId], references: [id]) // Relationship to User
  dataSources DataSource[] // A Comparator can have multiple DataSources

  @@index([ownerId])
}

model DataSource {
  id              String          @id @default(cuid())
  userId          String          // Foreign key to User
  comparatorId    Int             // Foreign key to Comparator
  authKey         String
  type            String
  sheetId         String
  lastUsed        DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  comparator      Comparator      @relation(fields: [comparatorId], references: [id]) // Relationship to Comparator
  selectedColumns SelectedColumn[]

  @@index([comparatorId])
}

model SelectedColumn {
  id           String     @id @default(cuid())
  dataSourceId String     // Foreign key to DataSource
  tabName      String
  columnName   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  dataSource   DataSource @relation(fields: [dataSourceId], references: [id])

  @@index([dataSourceId])
}
